{"files":{"src/controllers/saleControl.js":{"language":"javascript","mutants":[{"id":"23","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":23},"start":{"column":46,"line":18}}},{"id":"24","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":21},"start":{"column":9,"line":21}}},{"id":"25","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":21},"start":{"column":9,"line":21}}},{"id":"26","mutatorName":"EqualityOperator","replacement":"freshSale.message !== 'Product not found'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":21},"start":{"column":9,"line":21}}},{"id":"27","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":50,"line":21},"start":{"column":31,"line":21}}},{"id":"28","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":29},"start":{"column":18,"line":25}}},{"id":"19","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["6"],"coveredBy":["6"],"location":{"end":{"column":2,"line":9},"start":{"column":48,"line":5}}},{"id":"20","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","8"],"location":{"end":{"column":2,"line":16},"start":{"column":51,"line":11}}},{"id":"21","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Attempted to wrap saleListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","8"],"location":{"end":{"column":21,"line":14},"start":{"column":9,"line":14}}},{"id":"22","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Attempted to wrap saleListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","8"],"location":{"end":{"column":21,"line":14},"start":{"column":9,"line":14}}}],"source":"// Controller lida com as request HTTP do cliente e coordena as ações em res às req\n\nconst saleServ = require('../services/saleService');\n\nconst saleList = async (_request, response) => {\n    const sale = await saleServ.saleList();\n\n    return response.status(200).json(sale);\n};\n\nconst saleListById = async (request, response) => {\n    const { id } = request.params;\n    const sale = await saleServ.saleListById(id);\n    if (sale.message) return response.status(404).json(sale);\n    return response.status(200).json(sale);\n};\n\nconst addSale = async (request, response) => {\n    const sale = request.body;\n    const freshSale = await saleServ.addSale(sale);\n    if (freshSale.message === 'Product not found') return response.status(404).json(freshSale);\n    return response.status(201).json(freshSale);\n};\n\nmodule.exports = {\n    saleList,\n    saleListById,\n    addSale,\n};"},"src/middlewares/saleBodyValid.js":{"language":"javascript","mutants":[{"id":"74","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":11},"start":{"column":58,"line":3}}},{"id":"75","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":68,"line":4},"start":{"column":9,"line":4}}},{"id":"76","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":68,"line":4},"start":{"column":9,"line":4}}},{"id":"77","mutatorName":"LogicalOperator","replacement":"!request.body[0].quantity || request.body[0].quantity !== 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":68,"line":4},"start":{"column":9,"line":4}}},{"id":"78","mutatorName":"BooleanLiteral","replacement":"request.body[0].quantity","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":34,"line":4},"start":{"column":9,"line":4}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":68,"line":4},"start":{"column":38,"line":4}}},{"id":"80","mutatorName":"EqualityOperator","replacement":"request.body[0].quantity === 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":68,"line":4},"start":{"column":38,"line":4}}},{"id":"81","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":6},"start":{"column":70,"line":4}}},{"id":"84","mutatorName":"BooleanLiteral","replacement":"request.body[0].productId","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":7},"start":{"column":9,"line":7}}},{"id":"85","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":7},"start":{"column":9,"line":7}}},{"id":"86","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":7},"start":{"column":9,"line":7}}},{"id":"87","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":9},"start":{"column":37,"line":7}}},{"id":"82","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":79,"line":5},"start":{"column":42,"line":5}}},{"id":"83","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":77,"line":5},"start":{"column":53,"line":5}}},{"id":"88","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":80,"line":8},"start":{"column":42,"line":8}}},{"id":"89","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":78,"line":8},"start":{"column":53,"line":8}}}],"source":"// validacao de se há o id e quantidade de produtos na venda\n\nconst saleBodyValid = async (request, response, next) => {\n    if (!request.body[0].quantity && request.body[0].quantity !== 0) {\n        return response.status(400).json({ message: '\"quantity\" is required' });\n    }\n    if (!request.body[0].productId) {\n        return response.status(400).json({ message: '\"productId\" is required' });\n    }\n    next();\n};\n\nmodule.exports = saleBodyValid;"},"src/middlewares/saleValid.js":{"language":"javascript","mutants":[{"id":"90","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":23},"start":{"column":59,"line":5}}},{"id":"91","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":20},"start":{"column":7,"line":6}}},{"id":"92","mutatorName":"MethodExpression","replacement":"request.body.map(i => saleForm.validate(i).error)","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":32,"line":9},"start":{"column":17,"line":7}}},{"id":"95","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":71,"line":11},"start":{"column":9,"line":11}}},{"id":"96","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":71,"line":11},"start":{"column":9,"line":11}}},{"id":"97","mutatorName":"MethodExpression","replacement":"err.every(error => error.message.includes('be greater than'))","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":71,"line":11},"start":{"column":9,"line":11}}},{"id":"100","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":13},"start":{"column":73,"line":11}}},{"id":"103","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":15},"start":{"column":9,"line":15}}},{"id":"104","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":15},"start":{"column":9,"line":15}}},{"id":"105","mutatorName":"MethodExpression","replacement":"err.every(error => error.message.includes('is required'))","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":15},"start":{"column":9,"line":15}}},{"id":"108","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":17},"start":{"column":69,"line":15}}},{"id":"111","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":22},"start":{"column":19,"line":20}}},{"id":"93","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":45,"line":8},"start":{"column":12,"line":8}}},{"id":"94","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":31,"line":9},"start":{"column":15,"line":9}}},{"id":"98","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":70,"line":11},"start":{"column":18,"line":11}}},{"id":"99","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":69,"line":11},"start":{"column":52,"line":11}}},{"id":"101","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":84,"line":12},"start":{"column":32,"line":12}}},{"id":"102","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":83,"line":12},"start":{"column":66,"line":12}}},{"id":"106","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":15},"start":{"column":18,"line":15}}},{"id":"107","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":65,"line":15},"start":{"column":52,"line":15}}},{"id":"109","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":80,"line":16},"start":{"column":32,"line":16}}},{"id":"110","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":79,"line":16},"start":{"column":66,"line":16}}},{"id":"112","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":64,"line":21},"start":{"column":38,"line":21}}}],"source":"// validando vendas e retornando errors message\n\nconst { saleForm } = require('./joiSchema');\n\nconst saleValidating = async (request, response, next) => {\n  try {\n    const err = request.body\n      .map((i) => saleForm.validate(i).error)\n      .filter((error) => error);\n\n    if (err.some((error) => error.message.includes('be greater than'))) {\n      throw new Error(err.find((error) => error.message.includes('be greater than')).message);\n    }\n\n    if (err.some((error) => error.message.includes('is required'))) {\n      throw new Error(err.find((error) => error.message.includes('is required')).message);\n    }\n\n    next();\n  } catch (error) {\n    return response.status(422).json({ message: error.message });\n  }\n};\n\nmodule.exports = saleValidating;\n"},"src/models/prodModel.js":{"language":"javascript","mutants":[{"id":"133","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":35},"start":{"column":34,"line":29}}},{"id":"136","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":34},"start":{"column":12,"line":34}}},{"id":"137","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":34},"start":{"column":12,"line":34}}},{"id":"138","mutatorName":"EqualityOperator","replacement":"prod.length >= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":34},"start":{"column":12,"line":34}}},{"id":"139","mutatorName":"EqualityOperator","replacement":"prod.length <= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":34},"start":{"column":12,"line":34}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":49},"start":{"column":38,"line":37}}},{"id":"141","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":38},"start":{"column":9,"line":38}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":38},"start":{"column":9,"line":38}}},{"id":"143","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":47},"start":{"column":31,"line":38}}},{"id":"125","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":7},"start":{"column":42,"line":7}}},{"id":"127","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":81,"line":13},"start":{"column":44,"line":13}}},{"id":"128","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":87,"line":13},"start":{"column":83,"line":13}}},{"id":"130","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":49,"line":20},"start":{"column":9,"line":20}}},{"id":"131","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":15,"line":21},"start":{"column":9,"line":21}}},{"id":"132","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":6,"line":26},"start":{"column":12,"line":23}}},{"id":"134","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":46,"line":31},"start":{"column":9,"line":31}}},{"id":"135","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":13,"line":32},"start":{"column":9,"line":32}}},{"id":"144","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":56,"line":40},"start":{"column":13,"line":40}}},{"id":"145","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":23,"line":41},"start":{"column":13,"line":41}}},{"id":"146","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":10,"line":46},"start":{"column":16,"line":43}}},{"id":"147","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":44,"line":48},"start":{"column":12,"line":48}}},{"id":"148","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":42,"line":48},"start":{"column":23,"line":48}}},{"id":"149","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":57},"start":{"column":18,"line":51}}},{"id":"124","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ Array(3) ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":2,"line":9},"start":{"column":30,"line":6}}},{"id":"126","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Attempted to wrap execute which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":2,"line":15},"start":{"column":36,"line":12}}},{"id":"129","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Attempted to wrap execute which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18"],"location":{"end":{"column":2,"line":27},"start":{"column":33,"line":18}}}],"source":"// Model é a camada em contato direto com o BD\n\nconst connect = require('./connection');\n\n// Retorna lista de produtos da tabela mysql\nconst prodList = async () => {\n    const [prod] = await connect.execute('SELECT * FROM products');\n    return prod;\n};\n\n// Captura produto segundo param de Id em comandos no mysql\nconst prodListById = async (id) => {\n    const [[prod]] = await connect.execute('SELECT * FROM products WHERE id = ?', [id]);\n    return prod;\n};\n\n// adicionando produto no BD\nconst addProd = async (name) => {\n    const [{ insertId }] = await connect.execute(\n        'INSERT INTO products (name) VALUES (?)',\n        [name],\n    );\n    return {\n        id: insertId,\n        name,\n    };\n};\n\nconst verifyProd = async (id) => {\n    const [prod] = await connect.execute(\n        'SELECT * FROM products WHERE id = ?',\n        [id],\n    );\n    return prod.length > 0;\n};\n\nconst editProd = async (id, name) => {\n    if (await verifyProd(id)) {\n        await connect.execute(\n            'UPDATE products SET name = ? WHERE id = ?',\n            [name, id],\n        );\n        return {\n            id: Number(id),\n            name,\n        };\n    }\n    return { message: 'Product not found' };\n};\n\nmodule.exports = {\n    prodList,   \n    prodListById,\n    addProd,\n    editProd,\n    verifyProd,\n};\n"},"src/models/saleModel.js":{"language":"javascript","mutants":[{"id":"169","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":61},"start":{"column":71,"line":53}}},{"id":"173","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":70},"start":{"column":37,"line":63}}},{"id":"174","mutatorName":"MethodExpression","replacement":"new Date().toISOString()","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":64},"start":{"column":15,"line":64}}},{"id":"180","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":77},"start":{"column":33,"line":72}}},{"id":"181","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":73},"start":{"column":7,"line":73}}},{"id":"182","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":73},"start":{"column":7,"line":73}}},{"id":"183","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":75},"start":{"column":37,"line":73}}},{"id":"151","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":4,"line":18},"start":{"column":26,"line":6}}},{"id":"152","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":36},"start":{"column":17,"line":23}}},{"id":"154","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":59,"line":38},"start":{"column":55,"line":38}}},{"id":"156","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":57,"line":44},"start":{"column":19,"line":44}}},{"id":"158","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":67,"line":46},"start":{"column":54,"line":46}}},{"id":"163","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":43,"line":50},"start":{"column":25,"line":50}}},{"id":"168","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":5,"line":61},"start":{"column":20,"line":53}}},{"id":"170","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":78,"line":57},"start":{"column":1,"line":57}}},{"id":"171","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":36,"line":58},"start":{"column":5,"line":58}}},{"id":"172","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":35,"line":60},"start":{"column":12,"line":60}}},{"id":"175","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":64,"line":64},"start":{"column":61,"line":64}}},{"id":"176","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":69,"line":64},"start":{"column":66,"line":64}}},{"id":"177","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":49,"line":66},"start":{"column":12,"line":66}}},{"id":"178","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":56,"line":66},"start":{"column":51,"line":66}}},{"id":"179","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":37,"line":69},"start":{"column":10,"line":69}}},{"id":"184","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":44,"line":76},"start":{"column":12,"line":76}}},{"id":"185","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":42,"line":76},"start":{"column":23,"line":76}}},{"id":"186","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":86},"start":{"column":18,"line":79}}},{"id":"150","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Attempted to wrap execute which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":2,"line":21},"start":{"column":30,"line":5}}},{"id":"153","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ Array(1) ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":2,"line":40},"start":{"column":36,"line":37}}},{"id":"155","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":2,"line":51},"start":{"column":42,"line":43}}},{"id":"157","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["22"],"location":{"end":{"column":4,"line":48},"start":{"column":40,"line":45}}},{"id":"159","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["22"],"location":{"end":{"column":32,"line":47},"start":{"column":12,"line":47}}},{"id":"160","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected true to deeply equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":32,"line":47},"start":{"column":12,"line":47}}},{"id":"161","mutatorName":"EqualityOperator","replacement":"product.length !== 0","statusReason":"expected true to deeply equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":32,"line":47},"start":{"column":12,"line":47}}},{"id":"162","mutatorName":"MethodExpression","replacement":"resposta.some(i => i === false)","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["22"],"location":{"end":{"column":44,"line":50},"start":{"column":10,"line":50}}},{"id":"164","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to deeply equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":43,"line":50},"start":{"column":32,"line":50}}},{"id":"165","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["22"],"location":{"end":{"column":43,"line":50},"start":{"column":32,"line":50}}},{"id":"166","mutatorName":"EqualityOperator","replacement":"i !== false","statusReason":"expected true to deeply equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":43,"line":50},"start":{"column":32,"line":50}}},{"id":"167","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected true to deeply equal false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":43,"line":50},"start":{"column":38,"line":50}}}],"source":"// Model é a camada em contato direto com o BD\n\nconst connect = require('./connection');\n\nconst saleList = async () => {\n    const allQueryList = `\n    SELECT\n  sp.sale_id AS saleId,\n  s.date,\n  sp.product_id AS productId,\n  sp.quantity\nFROM\n  sales_products sp\n  INNER JOIN sales s ON sp.sale_id = s.id\nORDER BY\n  sp.sale_id ASC,\n  sp.product_id ASC\n  `;\n    const [sale] = await connect.execute(allQueryList);\n    return sale;\n};\n\nconst queryId = `\nSELECT\n  DATE_FORMAT(s.date, '%Y-%m-%dT%H:%i:%s.000Z') AS date,\n  sp.product_id AS productId,\n  sp.quantity\nFROM\n  sales_products sp\n  INNER JOIN sales s ON sp.sale_id = s.id\nWHERE\n  sp.sale_id = ?\nORDER BY\n  sp.sale_id ASC,\n  sp.product_id ASC\n`;\nconst saleListById = async (id) => {\n        const [sale] = await connect.execute(queryId, [id]);\n        return sale;\n};\n\n// \nconst verifyProdIdSale = async (sale) => {\n  const command = 'SELECT id FROM products WHERE id = ?';\n  const arrMap = sale.map(async (i) => {\n    const [product] = await connect.execute(command, [i.productId]);\n    return product.length === 0;\n  });\n  const resposta = await Promise.all(arrMap);\n  return resposta.every((i) => i === false);\n};\n\nconst insertSale = async (sale, insertId) => sale.map(async (elem) => {\n    const { productId, quantity } = elem;\n    await connect\n    .execute(\n'INSERT INTO sales_products (sale_id, product_id, quantity) VALUES (?, ?, ?)', \n    [insertId, productId, quantity],\n);\n    return { productId, quantity };\n  });\n\nconst addSaleToBD = async (sale) => {\n  const now = new Date().toISOString().slice(0, 19).replace('T', ' ');\n  const [{ insertId }] = await connect\n  .execute('INSERT INTO sales (date) VALUES (?)', [now]);\n  const allInsertSale = await insertSale(sale, insertId);\n  const itemsSold = await Promise.all(allInsertSale);\n  return { id: insertId, itemsSold };\n};\n\nconst addSale = async (sale) => {\n  if (await verifyProdIdSale(sale)) {\n    return addSaleToBD(sale);\n  }\n    return { message: 'Product not found' };\n};\n\nmodule.exports = {\n    saleList,\n    saleListById,\n    addSale,\n    verifyProdIdSale,\n    insertSale,\n    addSaleToBD,\n};\n"},"src/Routes/index.js":{"language":"javascript","mutants":[{"id":"0","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const prodRouter = require('./prodRoute');\nconst saleRouter = require('./saleRoute');\n\nmodule.exports = {\n    prodRouter,\n    saleRouter,\n};"},"src/Routes/prodRoute.js":{"language":"javascript","mutants":[{"id":"1","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":18,"line":10},"start":{"column":12,"line":10}}},{"id":"2","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":18,"line":11},"start":{"column":12,"line":11}}},{"id":"3","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":16,"line":12},"start":{"column":13,"line":12}}},{"id":"4","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":15,"line":13},"start":{"column":12,"line":13}}}],"source":"// Caminho para rotas\n\nconst express = require('express');\nconst prodControl = require('../controllers/prodControl');\nconst idValid = require('../middlewares/idValid');\nconst nameValid = require('../middlewares/prodNameValid');\nconst bodyValid = require('../middlewares/bodyValid');\n\nconst router = express.Router();\nrouter.get('/:id', idValid, prodControl.prodListById);\nrouter.put('/:id', idValid, bodyValid, nameValid, prodControl.editProd);\nrouter.post('/', bodyValid, nameValid, prodControl.addProd);\nrouter.get('/', prodControl.prodList);\n\nmodule.exports = router;\n"},"src/Routes/saleRoute.js":{"language":"javascript","mutants":[{"id":"5","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":18,"line":9},"start":{"column":12,"line":9}}},{"id":"6","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":16,"line":10},"start":{"column":13,"line":10}}},{"id":"7","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":15,"line":11},"start":{"column":12,"line":11}}}],"source":"const express = require('express');\nconst idValid = require('../middlewares/idValid');\nconst saleControl = require('../controllers/saleControl');\nconst saleValid = require('../middlewares/saleValid');\nconst saleBodyValid = require('../middlewares/saleBodyValid');\n\nconst router = express.Router();\n\nrouter.get('/:id', idValid, saleControl.saleListById);\nrouter.post('/', saleBodyValid, saleValid, saleControl.addSale);\nrouter.get('/', saleControl.saleList);\n\nmodule.exports = router;\n"},"src/controllers/prodControl.js":{"language":"javascript","mutants":[{"id":"17","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":45,"line":29},"start":{"column":26,"line":29}}},{"id":"18","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":38},"start":{"column":18,"line":33}}},{"id":"9","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":2,"line":17},"start":{"column":51,"line":11}}},{"id":"10","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Attempted to wrap prodListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":21,"line":15},"start":{"column":9,"line":15}}},{"id":"11","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Attempted to wrap prodListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":21,"line":15},"start":{"column":9,"line":15}}},{"id":"12","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 201","status":"Killed","static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2","3","4"],"location":{"end":{"column":2,"line":23},"start":{"column":46,"line":19}}},{"id":"13","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5"],"location":{"end":{"column":2,"line":31},"start":{"column":47,"line":25}}},{"id":"14","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Attempted to wrap editProd which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5"],"location":{"end":{"column":45,"line":29},"start":{"column":9,"line":29}}},{"id":"15","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Attempted to wrap editProd which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5"],"location":{"end":{"column":45,"line":29},"start":{"column":9,"line":29}}},{"id":"16","mutatorName":"EqualityOperator","replacement":"prod.message !== 'Product not found'","statusReason":"Attempted to wrap editProd which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5"],"location":{"end":{"column":45,"line":29},"start":{"column":9,"line":29}}},{"id":"8","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":2,"line":9},"start":{"column":48,"line":5}}}],"source":"// Controller lida com as request HTTP do cliente e coordena as ações em res às req\n\nconst prodServ = require('../services/prodService');\n\nconst prodList = async (_request, response) => {\n    const prod = await prodServ.prodList();\n\n    return response.status(200).json(prod);\n};\n\nconst prodListById = async (request, response) => {\n    const { id } = request.params;\n\n    const prod = await prodServ.prodListById(id);\n    if (prod.message) return response.status(404).json(prod);\n    return response.status(200).json(prod);\n};\n\nconst addProd = async (request, response) => {\n    const { name } = request.body;\n    const prod = await prodServ.addProd(name);\n    return response.status(201).json(prod);\n};\n\nconst editProd = async (request, response) => {\n    const { id } = request.params;\n    const { name } = request.body;\n    const prod = await prodServ.editProd(id, name);\n    if (prod.message === 'Product not found') return response.status(404).json(prod);\n    return response.status(200).json(prod);\n};\n\nmodule.exports = {\n    prodList,\n    prodListById,\n    addProd,\n    editProd,\n};\n"},"src/middlewares/bodyValid.js":{"language":"javascript","mutants":[{"id":"34","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":75,"line":5},"start":{"column":42,"line":5}}},{"id":"35","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":73,"line":5},"start":{"column":53,"line":5}}},{"id":"29","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9","10"],"location":{"end":{"column":2,"line":8},"start":{"column":54,"line":3}}},{"id":"30","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected stub to have been called with arguments ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9","10"],"location":{"end":{"column":40,"line":4},"start":{"column":9,"line":4}}},{"id":"31","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":2,"killedBy":["10"],"coveredBy":["9","10"],"location":{"end":{"column":40,"line":4},"start":{"column":9,"line":4}}},{"id":"32","mutatorName":"EqualityOperator","replacement":"request.body.name !== undefined","statusReason":"expected stub to have been called with arguments ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9","10"],"location":{"end":{"column":40,"line":4},"start":{"column":9,"line":4}}},{"id":"33","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":6,"line":6},"start":{"column":42,"line":4}}}],"source":"// validation de nome requerido\n\nconst bodyValid = async (request, response, next) => {\n    if (request.body.name === undefined) {\n        return response.status(400).json({ message: '\"name\" is required' });\n    }\n    next(); \n};\n\nmodule.exports = bodyValid;\n"},"src/middlewares/idValid.js":{"language":"javascript","mutants":[{"id":"39","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":97,"line":8},"start":{"column":49,"line":8}}},{"id":"40","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":95,"line":8},"start":{"column":60,"line":8}}},{"id":"36","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","12"],"location":{"end":{"column":2,"line":10},"start":{"column":52,"line":5}}},{"id":"37","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected stub to have been called with arguments ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","12"],"location":{"end":{"column":14,"line":8},"start":{"column":9,"line":8}}},{"id":"38","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["11","12"],"location":{"end":{"column":14,"line":8},"start":{"column":9,"line":8}}}],"source":"// Validacao do Id que vem do joiSchema, erro em caso de nao validacao\n\nconst { idForm } = require('./joiSchema');\n\nconst idValid = async (request, response, next) => {\n    const { error } = idForm.validate(request.params);\n\n    if (error) return response.status(422).json({ message: 'The data is not in the right form' });\n    next();\n};\n\nmodule.exports = idValid;\n"},"src/middlewares/joiSchema.js":{"language":"javascript","mutants":[{"id":"41","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":27,"line":5}}},{"id":"42","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":13},"start":{"column":33,"line":11}}},{"id":"43","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":16},"start":{"column":13,"line":13}}},{"id":"44","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":69,"line":14},"start":{"column":19,"line":14}}},{"id":"45","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":41,"line":15},"start":{"column":21,"line":15}}},{"id":"46","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":35},"start":{"column":29,"line":20}}},{"id":"47","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":6,"line":28},"start":{"column":15,"line":23}}},{"id":"48","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":50,"line":24},"start":{"column":25,"line":24}}},{"id":"49","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":25},"start":{"column":28,"line":25}}},{"id":"50","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":53,"line":26},"start":{"column":24,"line":26}}},{"id":"51","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":70,"line":27},"start":{"column":23,"line":27}}},{"id":"52","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":6,"line":34},"start":{"column":15,"line":30}}},{"id":"53","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":49,"line":31},"start":{"column":25,"line":31}}},{"id":"54","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":75,"line":32},"start":{"column":28,"line":32}}},{"id":"55","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":53,"line":33},"start":{"column":24,"line":33}}},{"id":"56","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":41},"start":{"column":18,"line":37}}}],"source":"// O schema do id procura validar o id passado, no caso numero, inteiro e positivo\n\nconst joi = require('joi');\n\nconst idForm = joi.object({\n    id: joi.number().integer().positive().required(),\n});\n\n// validacao de formato de nome de prouto\n\nconst prodNameForm = joi.object({\n    name: joi.string().min(5).required(),\n}).messages({\n    'string.min': '\"name\" length must be at least 5 characters long',\n    'any.required': '\"name\" is required',\n});\n\n// validacao de formato de nome de venda\n\nconst saleForm = joi.object({\n    productId: joi.number().integer().positive().required()\n    .min(1)\n    .messages({\n        'any.required': '\"productId\" is required',\n        'number.positive': '\"quantity\" must be a positive number',\n        'number.base': '\"quantity\" must be a number',\n        'number.min': '\"quantity\" must be greater than or equal to 1',\n    }),\n    quantity: joi.number().integer().positive().required()\n    .messages({\n        'any.required': '\"quantity\" is required',\n        'number.positive': '\"quantity\" must be greater than or equal to 1',\n        'number.base': '\"quantity\" must be a number',\n    }),\n});\n\nmodule.exports = {\n    idForm,\n    prodNameForm,\n    saleForm,\n};\n"},"src/middlewares/prodNameValid.js":{"language":"javascript","mutants":[{"id":"63","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":71,"line":7},"start":{"column":36,"line":7}}},{"id":"65","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":35,"line":9},"start":{"column":9,"line":9}}},{"id":"71","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":86,"line":12},"start":{"column":36,"line":12}}},{"id":"73","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":39,"line":14},"start":{"column":13,"line":14}}},{"id":"57","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14","15"],"location":{"end":{"column":2,"line":18},"start":{"column":58,"line":5}}},{"id":"58","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Cannot read properties of undefined (reading 'message')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14","15"],"location":{"end":{"column":71,"line":7},"start":{"column":9,"line":7}}},{"id":"59","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":3,"killedBy":["15"],"coveredBy":["13","14","15"],"location":{"end":{"column":71,"line":7},"start":{"column":9,"line":7}}},{"id":"60","mutatorName":"LogicalOperator","replacement":"error || error.message === '\"name\" is not allowed to be empty'","statusReason":"Cannot read properties of undefined (reading 'message')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14","15"],"location":{"end":{"column":71,"line":7},"start":{"column":9,"line":7}}},{"id":"61","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 422\n\u001b[31m400\u001b[0m \u001b[32m422\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15"],"location":{"end":{"column":71,"line":7},"start":{"column":18,"line":7}}},{"id":"62","mutatorName":"EqualityOperator","replacement":"error.message !== '\"name\" is not allowed to be empty'","statusReason":"expected status to have been called with arguments 422\n\u001b[31m400\u001b[0m \u001b[32m422\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","15"],"location":{"end":{"column":71,"line":7},"start":{"column":18,"line":7}}},{"id":"64","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":6,"line":11},"start":{"column":73,"line":7}}},{"id":"66","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Cannot read properties of undefined (reading 'message')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14"],"location":{"end":{"column":86,"line":12},"start":{"column":9,"line":12}}},{"id":"67","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":2,"killedBy":["14"],"coveredBy":["13","14"],"location":{"end":{"column":86,"line":12},"start":{"column":9,"line":12}}},{"id":"68","mutatorName":"LogicalOperator","replacement":"error || error.message === '\"name\" length must be at least 5 characters long'","statusReason":"Cannot read properties of undefined (reading 'message')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","14"],"location":{"end":{"column":86,"line":12},"start":{"column":9,"line":12}}},{"id":"69","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["14"],"location":{"end":{"column":86,"line":12},"start":{"column":18,"line":12}}},{"id":"70","mutatorName":"EqualityOperator","replacement":"error.message !== '\"name\" length must be at least 5 characters long'","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14"],"location":{"end":{"column":86,"line":12},"start":{"column":18,"line":12}}},{"id":"72","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14"],"location":{"end":{"column":6,"line":16},"start":{"column":88,"line":12}}}],"source":"// validacao com o schema do campo name\n\nconst { prodNameForm } = require('./joiSchema');\n\nconst prodNameValid = async (request, response, next) => {\n    const { error } = prodNameForm.validate(request.body);\n    if (error && error.message === '\"name\" is not allowed to be empty') {\n return response.status(400).json(\n        { message: error.message },\n        ); \n    }\n    if (error && error.message === '\"name\" length must be at least 5 characters long') {\n    return response.status(422).json(\n            { message: error.message },\n            );\n    }\n    next();\n};\n\nmodule.exports = prodNameValid;\n"},"src/models/connection.js":{"language":"javascript","mutants":[{"id":"113","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":4,"line":11},"start":{"column":45,"line":5}}},{"id":"114","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":52,"line":6},"start":{"column":11,"line":6}}},{"id":"115","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":52,"line":6},"start":{"column":11,"line":6}}},{"id":"116","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_HOSTNAME && 'localhost'","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":52,"line":6},"start":{"column":11,"line":6}}},{"id":"117","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":52,"line":6},"start":{"column":41,"line":6}}},{"id":"118","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":7},"start":{"column":11,"line":7}}},{"id":"119","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":7},"start":{"column":11,"line":7}}},{"id":"120","mutatorName":"LogicalOperator","replacement":"process.env.MYSQL_PORT && 3306","statusReason":"Static mutant (and \"ignoreStatic\" was enabled)","status":"Ignored","static":true,"coveredBy":[],"location":{"end":{"column":41,"line":7},"start":{"column":11,"line":7}}},{"id":"121","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":17,"line":8},"start":{"column":11,"line":8}}},{"id":"122","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":25,"line":9},"start":{"column":15,"line":9}}},{"id":"123","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":29,"line":10},"start":{"column":15,"line":10}}}],"source":"// Req do mySql, conectando ao node\n\nconst sqlConnection = require('mysql2/promise');\n\nconst connection = sqlConnection.createPool({\n    host: process.env.MYSQL_HOSTNAME || 'localhost',\n    port: process.env.MYSQL_PORT || 3306,\n    user: 'root',\n    password: 'password',\n    database: 'StoreManager',\n  });\n\n  module.exports = connection;\n"},"src/services/prodService.js":{"language":"javascript","mutants":[{"id":"192","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":55,"line":14},"start":{"column":23,"line":14}}},{"id":"193","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":53,"line":14},"start":{"column":34,"line":14}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":33},"start":{"column":18,"line":28}}},{"id":"187","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ Array(3) ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23"],"location":{"end":{"column":2,"line":9},"start":{"column":30,"line":6}}},{"id":"188","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal { id: 1, name: 'Martelo de Thor' }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","25"],"location":{"end":{"column":2,"line":16},"start":{"column":36,"line":12}}},{"id":"189","mutatorName":"BooleanLiteral","replacement":"prod","statusReason":"Attempted to wrap prodListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","25"],"location":{"end":{"column":14,"line":14},"start":{"column":9,"line":14}}},{"id":"190","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Attempted to wrap prodListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","25"],"location":{"end":{"column":14,"line":14},"start":{"column":9,"line":14}}},{"id":"191","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Attempted to wrap prodListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24","25"],"location":{"end":{"column":14,"line":14},"start":{"column":9,"line":14}}},{"id":"194","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal { id: 9, name: 'T-shirt' }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26"],"location":{"end":{"column":2,"line":21},"start":{"column":33,"line":18}}},{"id":"195","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal { id: '1', name: 'Martelo do Batman' }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["27"],"coveredBy":["27"],"location":{"end":{"column":2,"line":26},"start":{"column":38,"line":23}}}],"source":"// Service 'responsável pelas regras de negócio\n\nconst prodModel = require('../models/prodModel');\n\n// Recebe dados da camada model com a lista de produtos\nconst prodList = async () => {\n    const prod = await prodModel.prodList();\n    return prod;\n};\n\n// Procura produto por Id e se não encontrar dá product not found\nconst prodListById = async (id) => {\n    const prod = await prodModel.prodListById(id);\n    if (!prod) return { message: 'Product not found' };\n    return prod;\n};\n\nconst addProd = async (name) => {\n    const prod = await prodModel.addProd(name);\n    return prod;\n};\n\nconst editProd = async (id, name) => {\n    const prod = await prodModel.editProd(id, name);\n    return prod;\n};\n\nmodule.exports = {\n    prodList,\n    prodListById,\n    addProd,\n    editProd,\n};\n"},"src/services/saleService.js":{"language":"javascript","mutants":[{"id":"206","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":45,"line":13},"start":{"column":16,"line":13}}},{"id":"207","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":43,"line":13},"start":{"column":27,"line":13}}},{"id":"209","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":27},"start":{"column":18,"line":23}}},{"id":"197","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ Array(2) ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["28"],"coveredBy":["28"],"location":{"end":{"column":2,"line":8},"start":{"column":30,"line":5}}},{"id":"198","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ Array(1) ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","30"],"location":{"end":{"column":2,"line":16},"start":{"column":36,"line":10}}},{"id":"199","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Attempted to wrap saleListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","30"],"location":{"end":{"column":35,"line":12},"start":{"column":9,"line":12}}},{"id":"200","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Attempted to wrap saleListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","30"],"location":{"end":{"column":35,"line":12},"start":{"column":9,"line":12}}},{"id":"201","mutatorName":"LogicalOperator","replacement":"!sale && sale.length === 0","statusReason":"Attempted to wrap saleListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","30"],"location":{"end":{"column":35,"line":12},"start":{"column":9,"line":12}}},{"id":"202","mutatorName":"BooleanLiteral","replacement":"sale","statusReason":"Attempted to wrap saleListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","30"],"location":{"end":{"column":14,"line":12},"start":{"column":9,"line":12}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Attempted to wrap saleListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","30"],"location":{"end":{"column":35,"line":12},"start":{"column":18,"line":12}}},{"id":"204","mutatorName":"EqualityOperator","replacement":"sale.length !== 0","statusReason":"Attempted to wrap saleListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29","30"],"location":{"end":{"column":35,"line":12},"start":{"column":18,"line":12}}},{"id":"205","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Attempted to wrap saleListById which is already wrapped","status":"Killed","static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30"],"location":{"end":{"column":6,"line":14},"start":{"column":37,"line":12}}},{"id":"208","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal { Object (id, itemsSold) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31"],"location":{"end":{"column":2,"line":21},"start":{"column":33,"line":18}}}],"source":"// Service 'responsável pelas regras de negócio\n\nconst saleModel = require('../models/saleModel');\n\nconst saleList = async () => {\n    const sale = await saleModel.saleList();\n    return sale;\n};\n\nconst saleListById = async (id) => {\n    const sale = await saleModel.saleListById(id);\n    if (!sale || sale.length === 0) {\n        return { message: 'Sale not found' };\n    }\n    return sale;\n};\n\nconst addSale = async (sale) => {\n    const newSale = await saleModel.addSale(sale);\n    return newSale;\n};\n\nmodule.exports = {\n    saleList,\n    saleListById,\n    addSale,\n};\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"tests/unit/controllers/productsController.test.js":{"tests":[{"id":"0","name":"teste de controller da rota /products teste da res da rota /products"},{"id":"1","name":"teste de controller da rota /products teste da res da rota /products/:id"},{"id":"2","name":"teste de controller da rota /products teste se a res de /products retorna corretamente com item"},{"id":"3","name":"teste de controller da rota /products teste se post /products retorna erro, sem name"},{"id":"4","name":"teste de controller da rota /products rota post /products retorna com item errado, name com menos de 5 caracteres"},{"id":"5","name":"teste de controller da rota /products teste da rota put /products/:id"}],"source":"// Testes relativos à camada Controller\n\nconst chai = require('chai');\nconst sinon = require('sinon');\nconst chaiSinon = require('sinon-chai');\nconst prodService = require('../../../src/services/prodService');\nconst prodControl = require('../../../src/controllers/prodControl');\nconst { postMockReturn, editProdMockReturn } = require('../mockFile/saleMocked');\n\nchai.use(chaiSinon);\nconst { expect } = chai;\n\ndescribe('teste de controller da rota /products', function () {\n    it('teste da res da rota /products', async function () {\n        const myMock = [\n            {\n              id: 1,\n              name: 'Martelo de Thor',\n            },\n            {\n              id: 2,\n              name: 'Traje de encolhimento',\n            },\n            {\n              id: 3,\n              name: 'Escudo do CapitÃ£o AmÃ©rica',\n            },\n          ];\n        const request = {};\n        const response = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        sinon.stub(prodService, 'prodList').resolves(myMock);\n        await prodControl.prodList(request, response);\n        expect(response.status).to.have.been.calledWith(200);\n        expect(response.json).to.have.been.calledWith(myMock);\n        sinon.restore();\n    });\n    it('teste da res da rota /products/:id', async function () {\n        const request = { params: { id: 1 } };\n        const response = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        sinon.stub(prodService, 'prodListById')\n        .resolves({ id: 1, name: 'Martelo de Thor' });\n        await prodControl.prodListById(request, response);\n        expect(response.status).to.have.been.calledWith(200);\n        expect(response.json).to.have.been.calledWith({ id: 1, name: 'Martelo de Thor' });\n        sinon.restore();\n    });\n\n    it('teste se a res de /products retorna corretamente com item', async function () {\n      const request = { body: { name: 'T-shirt' } };\n      const response = {};\n      response.status = sinon.stub().returns(response);\n      response.json = sinon.stub().returns();\n      sinon.stub(prodService, 'addProd').resolves(postMockReturn);\n      await prodControl.addProd(request, response);\n      expect(response.status).to.have.been.calledWith(201);\n      expect(response.json).to.have.been.calledWith(postMockReturn);\n      sinon.restore();\n  });\n  it(\n  'teste se post /products retorna erro, sem name',\n   async function () {\n      const request = { body: { name: '' } };\n      const response = {};\n      response.status = sinon.stub().returns(response);\n      response.json = sinon.stub().returns();\n      sinon.stub(prodService, 'addProd').resolves({ \n        message: '\"name\" is not allowed to be empty', \n      });\n      await prodControl.addProd(request, response);\n      expect(response.json).to.have.been\n        .calledWith({ message: '\"name\" is not allowed to be empty' });\n      sinon.restore();\n  },\n);\n  it(\n    'rota post /products retorna com item errado, name com menos de 5 caracteres',\n     async function () {\n      const request = { body: { name: 'joia' } };\n      const response = {};\n      response.status = sinon.stub().returns(response);\n      response.json = sinon.stub().returns();\n      sinon.stub(prodService, 'addProd').resolves({ \n        message: '\"name\" length must be at least 5 characters long', \n      });\n      await prodControl.addProd(request, response);\n      expect(response.json).to.have.been.calledWith({ \n        message: '\"name\" length must be at least 5 characters long', \n      });\n      sinon.restore();\n    },\n  );\n\n  it('teste da rota put /products/:id', async function () {\n    const request = { body: { name: 'Camiseta' }, params: { id: 1 } };\n    const response = {};\n    response.status = sinon.stub().returns(response);\n    response.json = sinon.stub().returns();\n    sinon.stub(prodService, 'editProd').resolves(editProdMockReturn);\n    await prodControl.editProd(request, response);\n    expect(response.status).to.have.been.calledWith(200);\n    expect(response.json).to.have.been.calledWith(editProdMockReturn);\n    sinon.restore();\n});\n});\n"},"tests/unit/controllers/saleControl.test.js":{"tests":[{"id":"6","name":"teste de control da rota /sales teste da res de /sales"},{"id":"7","name":"teste de control da rota /sales teste da res de /sales/:id"},{"id":"8","name":"teste de control da rota /sales teste se retorna erro sale not found"}],"source":"// Testes de Sale Controller\n\nconst chai = require('chai');\nconst sinon = require('sinon');\nconst chaiSinon = require('sinon-chai');\nconst saleServ = require('../../../src/services/saleService');\nconst saleControl = require('../../../src/controllers/saleControl');\nconst { mockAll, uniqueIdMock } = require('../mockFile/saleMocked');\n\nchai.use(chaiSinon);\nconst { expect } = chai;\n\ndescribe('teste de control da rota /sales', function () {\n    it('teste da res de /sales', async function () {\n        const request = {};\n        const response = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        sinon.stub(saleServ, 'saleList').resolves(mockAll[0]);\n        await saleControl.saleList(request, response);\n        expect(response.status).to.have.been.calledWith(200);\n        expect(response.json).to.have.been.calledWith(mockAll[0]);\n        sinon.restore();\n    });\n    it('teste da res de /sales/:id', async function () {\n        const request = { params: { id: 1 } };\n        const response = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        sinon.stub(saleServ, 'saleListById')\n        .resolves(uniqueIdMock[0]);\n        await saleControl.saleListById(request, response);\n        expect(response.status).to.have.been.calledWith(200);\n        expect(response.json).to.have.been.calledWith(uniqueIdMock[0]);\n        sinon.restore();\n    });\n    it('teste se retorna erro sale not found', async function () {\n        const request = { params: { id: 9999 } };\n        const response = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        sinon.stub(saleServ, 'saleListById').resolves({ message: 'Sale not found' });\n        await saleControl.saleListById(request, response);\n        expect(response.status).to.have.been.calledWith(404);\n        expect(response.json).to.have.been.calledWith({ message: 'Sale not found' });\n        sinon.restore();\n    });\n});"},"tests/unit/middlewares/bodyValid.test.js":{"tests":[{"id":"9","name":"teste retorno de bodyValid teste de retorno de valid body"},{"id":"10","name":"teste retorno de bodyValid teste retorno de invalid body"}],"source":"// teste de valid do body\n\nconst chai = require('chai');\nconst sinon = require('sinon');\nconst chaiSinon = require('sinon-chai');\nconst bodyValid = require('../../../src/middlewares/bodyValid');\n\nchai.use(chaiSinon);\nconst { expect } = chai;\n\ndescribe('teste retorno de bodyValid', function () {\n    it('teste de retorno de valid body', async function () {\n        const request = { body: { name: 'T-shirt' } };\n        const response = {};\n        let next = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        next = sinon.stub().returns();\n        await bodyValid(request, response, next);\n        expect(next).to.have.been.calledWith();\n    });\n    it('teste retorno de invalid body', async function () {\n        const request = { body: { hulk: '' } };\n        const response = {};\n        let next = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        next = sinon.stub().returns();\n        await bodyValid(request, response, next);\n        expect(response.status).to.have.been.calledWith(400);\n        expect(response.json).to.have.been.calledWith({ message: '\"name\" is required' });\n    });\n});\n"},"tests/unit/middlewares/idValidation.test.js":{"tests":[{"id":"11","name":"teste do retorno do middlew idValid teste de retorno de valid id"},{"id":"12","name":"teste do retorno do middlew idValid teste de retorno de invalid id"}],"source":"// Teste da funcao middleware de validacao de Id\n\nconst chai = require('chai');\nconst sinon = require('sinon');\nconst chaiSinon = require('sinon-chai');\nconst idValid = require('../../../src/middlewares/idValid');\n\nchai.use(chaiSinon);\nconst { expect } = chai;\n\ndescribe('teste do retorno do middlew idValid', function () {\n    it('teste de retorno de valid id', async function () {\n        const request = { params: { id: 1 } };\n        const response = {};\n        let next = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        next = sinon.stub().returns();\n        await idValid(request, response, next);\n        expect(next).to.have.been.calledWith();\n    });\n    it('teste de retorno de invalid id', async function () {\n        const request = { params: { id: 'a' } };\n        const response = {};\n        let next = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        next = sinon.stub().returns();\n        await idValid(request, response, next);\n        expect(response.status).to.have.been.calledWith(422);\n        expect(response.json).to.have.been\n          .calledWith({ message: 'The data is not in the right form' });\n    });\n});\n"},"tests/unit/middlewares/prodNameValid.test.js":{"tests":[{"id":"13","name":"teste de return de nameValid teste valid name"},{"id":"14","name":"teste de return de nameValid teste se nome com menos de 5 caract"},{"id":"15","name":"teste de return de nameValid teste se ha retorno com empty name"}],"source":"// teste de validacao do name field\n\nconst chai = require('chai');\nconst sinon = require('sinon');\nconst chaiSinon = require('sinon-chai');\nconst prodNameValid = require('../../../src/middlewares/prodNameValid');\n\nchai.use(chaiSinon);\nconst { expect } = chai;\n\ndescribe('teste de return de nameValid', function () {\n    it('teste valid name', async function () {\n        const request = { body: { name: 'Bambole' } };\n        const response = {};\n        let next = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        next = sinon.stub().returns();\n        await prodNameValid(request, response, next);\n        expect(next).to.have.been.calledWith();\n    });\n    it('teste se nome com menos de 5 caract', async function () {\n        const request = { body: { name: 'hulk' } };\n        const response = {};\n        let next = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        next = sinon.stub().returns();\n        await prodNameValid(request, response, next);\n        expect(response.status).to.have.been.calledWith(422);\n        expect(response.json).to.have.been.calledWith({ \n            message: '\"name\" length must be at least 5 characters long', \n        });\n    });\n    it('teste se ha retorno com empty name', async function () {\n        const request = { body: { name: '' } };\n        const response = {};\n        let next = {};\n        response.status = sinon.stub().returns(response);\n        response.json = sinon.stub().returns();\n        next = sinon.stub().returns();\n        await prodNameValid(request, response, next);\n        expect(response.status).to.have.been.calledWith(400);\n        expect(response.json).to.have.been.calledWith({ \n            message: '\"name\" is not allowed to be empty', \n        });\n    });\n});\n"},"tests/unit/models/prodModel.test.js":{"tests":[{"id":"16","name":"teste rota de prod em Model teste de called da rota de prod"},{"id":"17","name":"teste rota de prod em Model teste se a rota com Id param é chamada"},{"id":"18","name":"teste rota de prod em Model teste se rota de criacao e corretamente chamada"},{"id":"19","name":"teste rota de prod em Model teste se a rota de edição de prod"}],"source":"// Testes da camada de Models\n\nconst chai = require('chai');\nconst sinon = require('sinon');\nconst connect = require('../../../src/models/connection');\nconst prodModel = require('../../../src/models/prodModel');\nconst { postMockBD, postMockReturn, editProdMockReturn } = require('../mockFile/saleMocked');\n\nconst { expect } = chai;\n\nconst myMock = [[\n    {\n      id: 1,\n      name: 'Martelo de Thor',\n    },\n    {\n      id: 2,\n      name: 'Traje de encolhimento',\n    },\n    {\n      id: 3,\n      name: 'Escudo do CapitÃ£o AmÃ©rica',\n    },\n  ]];\n\n  const uniqueIdMock = [[{\n    id: 1,\n    name: 'Martelo de Thor',\n  }]];\n\ndescribe('teste rota de prod em Model', function () {\n    it('teste de called da rota de prod', async function () {\n        sinon.stub(connect, 'execute').resolves(myMock);\n        const res = await prodModel.prodList();\n        expect(res).to.be.deep.equal(myMock[0]);\n        sinon.restore();\n    });\n    it('teste se a rota com Id param é chamada', async function () {\n        const mockId = 1;\n        sinon.stub(connect, 'execute').resolves(uniqueIdMock);\n        const res = await prodModel.prodListById(mockId);\n        expect(res).to.be.deep.equal(uniqueIdMock[0][0]);\n        sinon.restore();\n    });\n    it('teste se rota de criacao e corretamente chamada', async function () {\n      const mockNameProd = 'T-shirt';\n      sinon.stub(connect, 'execute').resolves(postMockBD);\n      const response = await prodModel.addProd(mockNameProd);\n      expect(response).to.be.deep.equal(postMockReturn);\n      sinon.restore();\n  });\n  it('teste se a rota de edição de prod', async function () {\n    sinon.stub(prodModel, 'verifyProd').resolves(true);\n    sinon.stub(connect, 'execute').resolves([[]]);\n    const response = await prodModel.verifyProd(editProdMockReturn, 1);\n    expect(response).to.be.deep.equal(true);\n    sinon.restore();\n  });\n});\n"},"tests/unit/models/saleModel.test.js":{"tests":[{"id":"20","name":"teste da rota sales em Model teste se a rota de /sales é corretamente chamada"},{"id":"21","name":"teste da rota sales em Model teste se /sales/:id é corretamente chamada"},{"id":"22","name":"teste da rota sales em Model teste darota sale na post function com prod que nao existe"}],"source":"// teste de saleModel\n\nconst chai = require('chai');\nconst sinon = require('sinon');\nconst connect = require('../../../src/models/connection');\nconst saleModel = require('../../../src/models/saleModel');\nconst { mockAll, uniqueIdMock, mockSale } = require('../mockFile/saleMocked');\n\nconst { expect } = chai;\n\ndescribe('teste da rota sales em Model', function () {\n    afterEach(function () {\n        sinon.restore();\n    });\n    it('teste se a rota de /sales é corretamente chamada', async function () {\n        sinon.stub(connect, 'execute').resolves(mockAll);\n        const res = await saleModel.saleList();\n        expect(res).to.be.deep.equal(mockAll[0]);\n        sinon.restore();\n    });\n    it('teste se /sales/:id é corretamente chamada', async function () {\n        const mockId = 1;\n        sinon.stub(connect, 'execute').resolves(uniqueIdMock);\n        const res = await saleModel.saleListById(mockId);\n        expect(res).to.be.deep.equal(uniqueIdMock[0]);\n        sinon.restore();\n    });\n    it('teste darota sale na post function com prod que nao existe', async function () {\n        sinon.stub(connect, 'execute').resolves([[]]);\n        const res = await saleModel.verifyProdIdSale(mockSale);\n        expect(res).to.be.deep.equal(false);\n        sinon.restore();\n    });\n});\n"},"tests/unit/services/prodService.test.js":{"tests":[{"id":"23","name":"teste de describe de /products teste da res da rota /products"},{"id":"24","name":"teste de describe de /products teste da res da rota /products/:id"},{"id":"25","name":"teste de describe de /products teste da rota quando id nao existe"},{"id":"26","name":"teste de describe de /products teste da res de post /products"},{"id":"27","name":"teste de describe de /products teste a res de put /products/:id"}],"source":"// Testes da camada de services\n\nconst chai = require('chai');\nconst sinon = require('sinon');\nconst prodService = require('../../../src/services/prodService');\nconst prodModel = require('../../../src/models/prodModel');\nconst { postMockReturn, editProdMockReturn } = require('../mockFile/saleMocked');\n\nconst { expect } = chai;\n\ndescribe('teste de describe de /products', function () {\n    it('teste da res da rota /products', async function () {\n        const myMock = [\n            {\n              id: 1,\n              name: 'Martelo de Thor',\n            },\n            {\n              id: 2,\n              name: 'Traje de encolhimento',\n            },\n            {\n              id: 3,\n              name: 'Escudo do CapitÃ£o AmÃ©rica',\n            },\n          ];\n        sinon.stub(prodModel, 'prodList').resolves(myMock);\n        const res = await prodService.prodList();\n        expect(res).to.be.deep.equal(myMock);\n        sinon.restore();\n    });\n    it('teste da res da rota /products/:id', async function () {\n        sinon.stub(prodModel, 'prodListById').resolves({ id: 1, name: 'Martelo de Thor' });\n        const res = await prodService.prodListById(1);\n        expect(res).to.be.deep.equal({ id: 1, name: 'Martelo de Thor' });\n        sinon.restore();\n    });\n    it('teste da rota quando id nao existe', async function () {\n        sinon.stub(prodModel, 'prodListById').resolves(undefined);\n        const res = await prodService.prodListById(4);\n        expect(res).to.be.deep.equal({ message: 'Product not found' });\n        sinon.restore();\n    });\n    it('teste da res de post /products', async function () {\n      const mockNameProd = 'Camiseta';\n      sinon.stub(prodModel, 'addProd').resolves(postMockReturn);\n      const response = await prodService.addProd(mockNameProd);\n      expect(response).to.be.deep.equal(postMockReturn);\n      sinon.restore();\n  });\n  it('teste a res de put /products/:id', async function () {\n    const mockProdName = 'Martelo do Batman';\n    sinon.stub(prodModel, 'editProd').resolves(editProdMockReturn);\n    const res = await prodService.editProd(mockProdName, 1);\n    expect(res).to.be.deep.equal(editProdMockReturn);\n    sinon.restore();\n  });\n});\n"},"tests/unit/services/saleService.test.js":{"tests":[{"id":"28","name":"teste de Service da rota /sales teste da res de /sales"},{"id":"29","name":"teste de Service da rota /sales teste da res de /sales/:id"},{"id":"30","name":"teste de Service da rota /sales teste de sale not found"},{"id":"31","name":"teste de Service da rota /sales teste da res de /sales na post function"}],"source":"// Teste da camada service de Sale\n\nconst chai = require('chai');\nconst sinon = require('sinon');\nconst saleModel = require('../../../src/models/saleModel');\nconst saleServ = require('../../../src/services/saleService');\nconst { mockAll, uniqueIdMock, mockSale, salePostMock } = require('../mockFile/saleMocked');\n\nconst { expect } = chai;\n\ndescribe('teste de Service da rota /sales', function () {\n    it('teste da res de /sales', async function () {\n        sinon.stub(saleModel, 'saleList').resolves(mockAll[0]);\n        const res = await saleServ.saleList();\n        expect(res).to.be.deep.equal(mockAll[0]);\n        sinon.restore();\n    });\n    it('teste da res de /sales/:id', async function () {\n        sinon.stub(saleModel, 'saleListById').resolves(uniqueIdMock[0]);\n        const res = await saleServ.saleListById(1);\n        expect(res).to.be.deep.equal(uniqueIdMock[0]);\n        sinon.restore();\n    });\n    it('teste de sale not found', async function () {\n        const mockId = 9999;\n        sinon.stub(saleModel, 'saleListById').resolves([]);\n        const res = await saleServ.saleListById(mockId);\n        expect(res).to.be.deep.equal({ message: 'Sale not found' });\n        sinon.restore();\n    });\n    it('teste da res de /sales na post function', async function () {\n        sinon.stub(saleModel, 'addSale').resolves(salePostMock);\n        const res = await saleServ.addSale(mockSale);\n        expect(res).to.be.deep.equal(salePostMock);\n        sinon.restore();\n    });\n});\n"}},"projectRoot":"/home/andre/Documentos/albernazandre.github.io/sd-028-a-store-manager/backend","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","packageManager":"npm","reporters":["html","clear-text","json","progress"],"mutate":["src/**/*.js","!src/{app,server}.js"],"mutator":{"excludedMutations":["StringLiteral","ObjectLiteral","ArrayDeclaration","ArrowFunction"],"plugins":null},"testRunner":"mocha","coverageAnalysis":"perTest","ignoreStatic":true,"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":"{test,src,lib}/**/*.{js,ts,jsx,tsx,html,vue}","symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"mochaOptions":{}},"framework":{"name":"StrykerJS","version":"6.4.2","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"6.4.2","mocha":"10.2.0"}}}